dbProxy:
  image:
    name: yuvipanda/paws-db-proxy
    tag: vd74f11d

queryKiller:
  image:
    name: yuvipanda/paws-query-killer
    tag: v98acb53
  maxQueryTime: 1800

mysql:
  # The hostname is only used to establish a database connection by db-proxy,
  # it doesn't actually select enwiki as the database connected to.
  host: enwiki.analytics.db.svc.eqiad.wmflabs
  username: s52771

deployHook:
  host: paws-deploy-hook.tools.wmflabs.org

jupyterhub:
  hub:
      # FIXME: Stop running hub as root.
      # Currently this is required to get the culler to work, which
      # is ridiculous
      uid: 0
      fsGid: 0
      baseUrl: "/paws/"
      extraEnv:
        USER: 'tools.paws'
      extraConfig: |
          import contextlib
          import hmac
          import hashlib
          import os
          from oauthenticator.mediawiki import MWOAuthenticator
          from tornado import gen

          @contextlib.contextmanager
          def acquire_privileges(euid=True, egid=False):
              olduid, oldgid = os.geteuid(), os.egid()
              if euid: os.seteuid(0)
              if egid: os.setegid(0)

              try:
                  yield
              finally:
                  if egid: os.setegid(oldgid)
                  if euid: os.seteuid(olduid)

          @contextlib.contextmanager
          def drop_privileges(euid=None, egid=None):
              setuid = os.geteuid() == 0 and euid is not None
              setgid = os.getegid() == 0 and egid is not None
              # set egid first, we may lose ability to set it after our euid != 0
              if setgid:
                  try:
                      os.setresgid(-1, egid, 0)
                  except OSError:
                      # we aren't privileged in effective uid to drop egid,
                      # let's try if either real or saved uid is privileged,
                      # and drop it immediately after we got gid dropped.
                      with acquire_privileges():
                          os.setresgid(-1, egid, 0)
              if setuid:
                  os.setresuid(-1, euid, 0)

              try:
                  yield
              finally:
                  # acquire the privilege back from saved user/group id
                  if setuid: os.seteuid(0)
                  if setgid: os.setegid(0)

          class Auth(MWOAuthenticator):
              enable_auth_state = True
              @gen.coroutine
              def pre_spawn_start(self, user, spawner):
                  auth_state = yield user.get_auth_state()
                  identity = auth_state['MEDIAWIKI_USER_IDENTITY']
                  spawner.environment['ACCESS_KEY'] = auth_state['ACCESS_TOKEN_KEY']
                  spawner.environment['ACCESS_SECRET'] = auth_state['ACCESS_TOKEN_SECRET']
                  spawner.environment['CLIENT_ID'] = self.client_id
                  spawner.environment['CLIENT_SECRET'] = self.client_secret
                  spawner.environment['USER'] = identity['username']

                  homedir = '/data/project/paws/userhomes/{}'.format(identity['sub'])
                  with drop_privileges(52771, 52771):
                      if os.path.exists(homedir):
                          os.mkdir(homedir)

                  # Set rather than use .extend!
                  # Since otherwise the volumes list will grow each time
                  # the spawner stops and starts!
                  spawner.volumes = [
                      {
                          'name': 'home',
                          'hostPath': { 'path': homedir }
                      },
                      {
                          'name': 'dumps',
                          'hostPath': { 'path': '/public/dumps' }
                      }
                  ]
                  spawner.volume_mounts = [
                      {
                          'name': 'home',
                          'mountPath': '/home/paws'
                      },
                      {
                          'name': 'dumps',
                          'mountPath': '/public/dumps'
                      }
                  ]

                  spawner.environment['MYSQL_HOST'] = os.environ['MYSQL_SERVICE_HOST']
                  mysql_password = hmac.new(
                      os.environ['MYSQL_HMAC_KEY'].encode('utf-8'),
                      identity['username'].encode('utf-8'),
                      hashlib.sha256
                  ).hexdigest()
                  spawner.environment['MYSQL_USERNAME'] = identity['username']
                  spawner.environment['MYSQL_PASSWORD'] = mysql_password

          c.JupyterHub.authenticator_class = Auth
      db:
          pvc:
              selector:
                  matchLabels:
                      type: hostpath
                      kind: hubdb
              accessModes:
                  - ReadWriteMany

  auth:
      type: mediawiki
      admin:
          users:
          - yuvipanda
          - bdavis_(wmf)
          - andrewbogott
          - chicocvenancio
          - zhuyifei1999

  singleuser:
      uid: 52771
      fsGid: 52771
      image:
          name: yuvipanda/paws-singleuser
          tag: v4db45b9
      storage:
          type: none

  ingress:
      enabled: true
      annotations:
        ingress.kubernetes.io/proxy-body-size: 64m
        kubernetes.io/ingress.class: nginx
        kubernetes.io/tls-acme: "true"
      hosts:
          - paws-beta.wmflabs.org
      tls:
        - secretName: kubelego-tls-jupyterhub-prod
          hosts:
              - paws-beta.wmflabs.org
